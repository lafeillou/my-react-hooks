{"ast":null,"code":"var _jsxFileName = \"/Users/app-app/Desktop/my-react-hooks/lesson1-3/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo } from \"react\";\nimport \"./App.css\";\nimport { useFetch } from \"./useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction computedLongestWord(arr) {\n  if (!arr) {\n    return [];\n  }\n\n  console.log(\"computing longset word\");\n  let longestWord = \"\";\n  JSON.parse(arr).forEach(sentence => sentence.split(\" \").forEach(word => {\n    if (word.length > longestWord.length) {\n      longestWord = word;\n    }\n  }));\n  return longestWord;\n}\n\nconst App = () => {\n  _s();\n\n  const [count, setCount] = useState(0);\n  const {\n    data\n  } = useFetch(\"https://raw.githubusercontent.com/ajzbc/kanye.rest/master/quotes.json\");\n  const longestWord = useMemo(() => computedLongestWord(data), [data, computedLongestWord]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"count: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count + 1),\n      children: \"increment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: longestWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"FFQii9byepK0Z7EsVdCuxZzX3dE=\", false, function () {\n  return [useFetch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/app-app/Desktop/my-react-hooks/lesson1-3/src/App.js"],"names":["React","useState","useMemo","useFetch","computedLongestWord","arr","console","log","longestWord","JSON","parse","forEach","sentence","split","word","length","App","count","setCount","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;AACA,OAAO,WAAP;AACA,SAASC,QAAT,QAAyB,YAAzB;;;AAEA,SAASC,mBAAT,CAA6BC,GAA7B,EAAkC;AAChC,MAAI,CAACA,GAAL,EAAU;AACR,WAAO,EAAP;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,MAAIC,WAAW,GAAG,EAAlB;AAEAC,EAAAA,IAAI,CAACC,KAAL,CAAWL,GAAX,EAAgBM,OAAhB,CAAyBC,QAAD,IACtBA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBF,OAApB,CAA6BG,IAAD,IAAU;AACpC,QAAIA,IAAI,CAACC,MAAL,GAAcP,WAAW,CAACO,MAA9B,EAAsC;AACpCP,MAAAA,WAAW,GAAGM,IAAd;AACD;AACF,GAJD,CADF;AAQA,SAAON,WAAP;AACD;;AAED,MAAMQ,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAEkB,IAAAA;AAAF,MAAWhB,QAAQ,CACvB,uEADuB,CAAzB;AAGA,QAAMK,WAAW,GAAGN,OAAO,CAAC,MAAME,mBAAmB,CAACe,IAAD,CAA1B,EAAkC,CAC3DA,IAD2D,EAE3Df,mBAF2D,CAAlC,CAA3B;AAKA,sBACE;AAAA,4BACE;AAAA,4BAAaa,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,gBAAMT;AAAN;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAjBD;;GAAMQ,G;UAEab,Q;;;KAFba,G;AAkBN,eAAeA,GAAf","sourcesContent":["import React, { useState, useMemo } from \"react\";\nimport \"./App.css\";\nimport { useFetch } from \"./useFetch\";\n\nfunction computedLongestWord(arr) {\n  if (!arr) {\n    return [];\n  }\n  console.log(\"computing longset word\");\n  let longestWord = \"\";\n\n  JSON.parse(arr).forEach((sentence) =>\n    sentence.split(\" \").forEach((word) => {\n      if (word.length > longestWord.length) {\n        longestWord = word;\n      }\n    })\n  );\n\n  return longestWord;\n}\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const { data } = useFetch(\n    \"https://raw.githubusercontent.com/ajzbc/kanye.rest/master/quotes.json\"\n  );\n  const longestWord = useMemo(() => computedLongestWord(data), [\n    data,\n    computedLongestWord,\n  ]);\n\n  return (\n    <div>\n      <div>count: {count}</div>\n      <button onClick={() => setCount(count + 1)}>increment</button>\n      <div>{longestWord}</div>\n    </div>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}