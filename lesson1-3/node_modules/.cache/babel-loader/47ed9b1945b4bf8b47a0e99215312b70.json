{"ast":null,"code":"var _jsxFileName = \"/Users/app-app/Desktop/my-react-hooks/lesson1-3/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useCallback } from \"react\";\nimport \"./App.css\";\nimport { useFetch } from \"./useFetch\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst computeLongestWord = useCallback(arr => {\n  if (!arr) {\n    return [];\n  }\n\n  console.log(\"computing longset word\");\n  let longestWord = \"\";\n  JSON.parse(arr).forEach(sentence => sentence.split(\" \").forEach(word => {\n    if (word.length > longestWord.length) {\n      longestWord = word;\n    }\n  }));\n  return longestWord;\n}); // function computedLongestWord(arr) {\n//   if (!arr) {\n//     return [];\n//   }\n//   console.log(\"computing longset word\");\n//   let longestWord = \"\";\n//   JSON.parse(arr).forEach((sentence) =>\n//     sentence.split(\" \").forEach((word) => {\n//       if (word.length > longestWord.length) {\n//         longestWord = word;\n//       }\n//     })\n//   );\n//   return longestWord;\n// }\n\nconst App = () => {\n  _s();\n\n  const [count, setCount] = useState(0);\n  const {\n    data\n  } = useFetch(\"https://raw.githubusercontent.com/ajzbc/kanye.rest/master/quotes.json\");\n  const longestWord = useMemo(() => computedLongestWord(data), [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"count: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count + 1),\n      children: \"increment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: longestWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"FFQii9byepK0Z7EsVdCuxZzX3dE=\", false, function () {\n  return [useFetch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/app-app/Desktop/my-react-hooks/lesson1-3/src/App.js"],"names":["React","useState","useMemo","useCallback","useFetch","computeLongestWord","arr","console","log","longestWord","JSON","parse","forEach","sentence","split","word","length","App","count","setCount","data","computedLongestWord"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,WAAnC,QAAsD,OAAtD;AACA,OAAO,WAAP;AACA,SAASC,QAAT,QAAyB,YAAzB;;AAEA,MAAMC,kBAAkB,GAAGF,WAAW,CAAEG,GAAD,IAAS;AAC9C,MAAI,CAACA,GAAL,EAAU;AACR,WAAO,EAAP;AACD;;AACDC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACA,MAAIC,WAAW,GAAG,EAAlB;AAEAC,EAAAA,IAAI,CAACC,KAAL,CAAWL,GAAX,EAAgBM,OAAhB,CAAyBC,QAAD,IACtBA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBF,OAApB,CAA6BG,IAAD,IAAU;AACpC,QAAIA,IAAI,CAACC,MAAL,GAAcP,WAAW,CAACO,MAA9B,EAAsC;AACpCP,MAAAA,WAAW,GAAGM,IAAd;AACD;AACF,GAJD,CADF;AAQA,SAAON,WAAP;AACD,CAhBqC,CAAtC,C,CAiBA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,MAAMQ,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBlB,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM;AAAEmB,IAAAA;AAAF,MAAWhB,QAAQ,CACvB,uEADuB,CAAzB;AAGA,QAAMK,WAAW,GAAGP,OAAO,CAAC,MAAMmB,mBAAmB,CAACD,IAAD,CAA1B,EAAkC,CAACA,IAAD,CAAlC,CAA3B;AAEA,sBACE;AAAA,4BACE;AAAA,4BAAaF,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,gBAAMT;AAAN;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAdD;;GAAMQ,G;UAEab,Q;;;KAFba,G;AAeN,eAAeA,GAAf","sourcesContent":["import React, { useState, useMemo, useCallback } from \"react\";\nimport \"./App.css\";\nimport { useFetch } from \"./useFetch\";\n\nconst computeLongestWord = useCallback((arr) => {\n  if (!arr) {\n    return [];\n  }\n  console.log(\"computing longset word\");\n  let longestWord = \"\";\n\n  JSON.parse(arr).forEach((sentence) =>\n    sentence.split(\" \").forEach((word) => {\n      if (word.length > longestWord.length) {\n        longestWord = word;\n      }\n    })\n  );\n\n  return longestWord;\n});\n// function computedLongestWord(arr) {\n//   if (!arr) {\n//     return [];\n//   }\n//   console.log(\"computing longset word\");\n//   let longestWord = \"\";\n\n//   JSON.parse(arr).forEach((sentence) =>\n//     sentence.split(\" \").forEach((word) => {\n//       if (word.length > longestWord.length) {\n//         longestWord = word;\n//       }\n//     })\n//   );\n\n//   return longestWord;\n// }\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const { data } = useFetch(\n    \"https://raw.githubusercontent.com/ajzbc/kanye.rest/master/quotes.json\"\n  );\n  const longestWord = useMemo(() => computedLongestWord(data), [data]);\n\n  return (\n    <div>\n      <div>count: {count}</div>\n      <button onClick={() => setCount(count + 1)}>increment</button>\n      <div>{longestWord}</div>\n    </div>\n  );\n};\nexport default App;\n"]},"metadata":{},"sourceType":"module"}